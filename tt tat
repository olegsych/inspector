[1mdiff --git a/tst/FieldNameFilter.cs b/tst/FieldNameFilter.cs[m
[1mnew file mode 100644[m
[1mindex 0000000..4096f1a[m
[1m--- /dev/null[m
[1m+++ b/tst/FieldNameFilter.cs[m
[36m@@ -0,0 +1,23 @@[m
[32m+[m[32musing System;[m
[32m+[m[32musing System.Collections.Generic;[m
[32m+[m[32musing System.Linq;[m
[32m+[m
[32m+[m[32mnamespace Inspector[m
[32m+[m[32m{[m
[32m+[m[32m    sealed class FieldNameFilter : IFilter<Field>[m
[32m+[m[32m    {[m
[32m+[m[32m        readonly IFilter<Field> fields;[m
[32m+[m[32m        readonly string fieldName;[m
[32m+[m
[32m+[m[32m        public FieldNameFilter(IFilter<Field> fields, string fieldName) {[m
[32m+[m[32m            this.fields = fields ?? throw new ArgumentNullException(nameof(fields));[m
[32m+[m[32m            this.fieldName = fieldName ?? throw new ArgumentNullException(nameof(fieldName));[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        string IDescriptor.Describe() =>[m
[32m+[m[32m            throw new NotImplementedException();[m
[32m+[m
[32m+[m[32m        IEnumerable<Field> IFilter<Field>.Get() =>[m
[32m+[m[32m            fields.Get().Where(field => field.Info.Name == fieldName);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/tst/FieldNameFilterTest.cs b/tst/FieldNameFilterTest.cs[m
[1mnew file mode 100644[m
[1mindex 0000000..1b91882[m
[1m--- /dev/null[m
[1m+++ b/tst/FieldNameFilterTest.cs[m
[36m@@ -0,0 +1,62 @@[m
[32m+[m[32musing System;[m
[32m+[m[32musing System.Collections.Generic;[m
[32m+[m[32musing System.Reflection;[m
[32m+[m[32musing NSubstitute;[m
[32m+[m[32musing Xunit;[m
[32m+[m[32musing static Inspector.Substitutes;[m
[32m+[m
[32m+[m[32mnamespace Inspector[m
[32m+[m[32m{[m
[32m+[m[32m    public class FieldNameFilterTest[m
[32m+[m[32m    {[m
[32m+[m[32m        readonly IFilter<Field> sut;[m
[32m+[m
[32m+[m[32m        // Constructor parameters[m
[32m+[m[32m        readonly IFilter<Field> fields = Substitute.For<IFilter<Field>>();[m
[32m+[m[32m        readonly string fieldName = Guid.NewGuid().ToString();[m
[32m+[m
[32m+[m[32m        public FieldNameFilterTest() =>[m
[32m+[m[32m            sut = new FieldNameFilter(fields, fieldName);[m
[32m+[m
[32m+[m[32m        public class Constructor : FieldNameFilterTest[m
[32m+[m[32m        {[m
[32m+[m[32m            [Fact][m
[32m+[m[32m            public void ThrowsDescriptiveExceptionWhenFilterIsNull() {[m
[32m+[m[32m                var thrown = Assert.Throws<ArgumentNullException>(() => new FieldNameFilter(null, fieldName));[m
[32m+[m[32m                Assert.Equal("fields", thrown.ParamName);[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            [Fact][m
[32m+[m[32m            public void ThrowsDescriptiveExceptionWhenFieldNameIsNull() {[m
[32m+[m[32m                var thrown = Assert.Throws<ArgumentNullException>(() => new FieldNameFilter(fields, null));[m
[32m+[m[32m                Assert.Equal("fieldName", thrown.ParamName);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public class Get : FieldNameFilterTest[m
[32m+[m[32m        {[m
[32m+[m[32m            [Fact][m
[32m+[m[32m            public void ReturnsFieldsWithGivenName() {[m
[32m+[m[32m                // Arrange[m
[32m+[m[32m                FieldInfo fieldInfo = FieldInfo(FieldAttributes.Static, fieldName);[m
[32m+[m
[32m+[m[32m                var expected = new[] { new Field(fieldInfo), new Field(fieldInfo) };[m
[32m+[m
[32m+[m[32m                var mixed = new[] {[m
[32m+[m[32m                    new Field(FieldInfo(FieldAttributes.Static)),[m
[32m+[m[32m                    expected[0],[m
[32m+[m[32m                    new Field(FieldInfo(FieldAttributes.Static)),[m
[32m+[m[32m                    expected[1],[m
[32m+[m[32m                    new Field(FieldInfo(FieldAttributes.Static))[m
[32m+[m[32m                };[m
[32m+[m
[32m+[m[32m                fields.Get().Returns(mixed);[m
[32m+[m
[32m+[m[32m                // Act[m
[32m+[m[32m                IEnumerable<Field> actual = sut.Get();[m
[32m+[m
[32m+[m[32m                Assert.Equal(expected, actual);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/tst/Substitutes.cs b/tst/Substitutes.cs[m
[1mindex 27417c1..7da2d52 100644[m
[1m--- a/tst/Substitutes.cs[m
[1m+++ b/tst/Substitutes.cs[m
[36m@@ -10,11 +10,16 @@[m [mnamespace Inspector[m
 [m
         static uint Next => seed++;[m
 [m
[31m-        public static FieldInfo FieldInfo(FieldAttributes attributes, Type fieldType = default) {[m
[32m+[m[32m        public static FieldInfo FieldInfo(FieldAttributes attributes, string fieldName) =>[m
[32m+[m[32m            FieldInfo(attributes, null, fieldName);[m
[32m+[m
[32m+[m[32m        public static FieldInfo FieldInfo(FieldAttributes attributes, Type fieldType = default, string fieldName = default) {[m
             fieldType = fieldType ?? Type();[m
[32m+[m[32m            fieldName = fieldName ?? $"Field{Next}";[m
             var field = Substitute.For<FieldInfo>();[m
             field.Attributes.Returns(attributes);[m
             field.FieldType.Returns(fieldType);[m
[32m+[m[32m            field.Name.Returns(fieldName);[m
             return field;[m
         }[m
 [m
